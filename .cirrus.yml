only_if: $CIRRUS_TAG == '' && ($CIRRUS_PR != '' || $CIRRUS_BRANCH == 'main')
auto_cancellation: $CIRRUS_PR != ''
env:
  CARGO_INCREMENTAL: '0'
  CARGO_NET_RETRY: '10'
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: '1'
  RUST_TEST_THREADS: '1'
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings --cfg portable_atomic_unstable_f16 --cfg quickcheck_unstable_f16 --cfg rand_unstable_f16 --cfg portable_atomic_unstable_f128 --cfg quickcheck_unstable_f128 --cfg rand_unstable_f128
  RUSTUP_MAX_RETRIES: '10'
  PORTABLE_ATOMIC_DENY_WARNINGS: '1'

aarch64_linux_test_task:
  name: test ($TARGET)
  env:
    TARGET: aarch64-unknown-linux-gnu
  arm_container:
    image: rust
  setup_script:
    - set -CeEuxo pipefail
    - |
      retry() {
        for i in {1..10}; do
          if "$@"; then
            return 0
          else
            sleep "${i}"
          fi
        done
        "$@"
      }
    - lscpu
    - retry rustup toolchain add nightly --no-self-update && rustup default nightly
    # - retry apt-get -o Acquire::Retries=10 -qq update && retry apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends moreutils
    - retry curl --proto '=https' --tlsv1.2 -fsSL "https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-${TARGET}.tar.gz" | tar xzf - -C "${CARGO_HOME}/bin"
  test_script:
    - set -CeEuxo pipefail
    - ./tools/test.sh -vv
    # We test doctest only once with the default build conditions because doctest is slow. Both api-test
    # and src/tests have extended copies of doctest, so this will not reduce test coverage.
    # outline-atomics is enabled by default on linux-gnu and linux-musl with dynamic linking.
    - RUSTFLAGS="${RUSTFLAGS} --cfg portable_atomic_no_outline_atomics" RUSTDOCFLAGS="${RUSTDOCFLAGS} --cfg portable_atomic_no_outline_atomics" ./tools/test.sh -vv --tests
    # +lse
    # Neoverse N1 is Armv8.2 and doesn't support FEAT_LSE2.
    # FEAT_LSE2 is tested on AArch64 macOS VM.
    - RUSTFLAGS="${RUSTFLAGS} -C target-feature=+lse" RUSTDOCFLAGS="${RUSTDOCFLAGS} -C target-feature=+lse" ./tools/test.sh -vv --tests

aarch64_linux_valgrind_task:
  name: valgrind ($TARGET)
  env:
    TARGET: aarch64-unknown-linux-gnu
  arm_container:
    image: rust
  setup_script:
    - set -CeEuxo pipefail
    - |
      retry() {
        for i in {1..10}; do
          if "$@"; then
            return 0
          else
            sleep "${i}"
          fi
        done
        "$@"
      }
    - retry rustup toolchain add nightly --no-self-update && rustup default nightly
    - retry apt-get -o Acquire::Retries=10 -qq update && retry apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends valgrind # moreutils
    - retry curl --proto '=https' --tlsv1.2 -fsSL "https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-${TARGET}.tar.gz" | tar xzf - -C "${CARGO_HOME}/bin"
  test_script:
    - set -CeEuxo pipefail
    - ./tools/test.sh valgrind -vv
    # outline-atomics is enabled by default on linux-gnu and linux-musl with dynamic linking.
    - RUSTFLAGS="${RUSTFLAGS} --cfg portable_atomic_no_outline_atomics" RUSTDOCFLAGS="${RUSTDOCFLAGS} --cfg portable_atomic_no_outline_atomics" ./tools/test.sh valgrind -vv
    # +lse
    # As of Valgrind 3.19, Valgrind supports atomic instructions of Armv8.0 and Armv8.1 (FEAT_LSE).
    - RUSTFLAGS="${RUSTFLAGS} -C target-feature=+lse" RUSTDOCFLAGS="${RUSTDOCFLAGS} -C target-feature=+lse" ./tools/test.sh valgrind -vv
