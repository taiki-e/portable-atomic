name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - dev
      - staging
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_TEST_THREADS: 1
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
          - rust: beta
          - rust: nightly
          - rust: nightly
            os: macos-latest
          - rust: nightly
            os: windows-latest
          - rust: stable
            target: aarch64-unknown-linux-gnu
          - rust: beta
            target: aarch64-unknown-linux-gnu
          - rust: nightly
            target: aarch64-unknown-linux-gnu
          - rust: nightly
            target: aarch64_be-unknown-linux-gnu
            os: ubuntu-18.04
          - rust: nightly
            target: arm-unknown-linux-gnueabi
          - rust: nightly
            target: armv5te-unknown-linux-gnueabi
          - rust: nightly
            target: armv7-unknown-linux-gnueabi
          - rust: nightly
            target: armv7-unknown-linux-gnueabihf
          - rust: nightly
            target: i586-unknown-linux-gnu
          - rust: nightly
            target: i686-unknown-linux-gnu
          - rust: nightly
            target: mips-unknown-linux-gnu
            os: ubuntu-18.04
          - rust: nightly
            target: mips64-unknown-linux-gnuabi64
            os: ubuntu-18.04
          - rust: nightly
            target: mips64el-unknown-linux-gnuabi64
          - rust: nightly
            target: mipsel-unknown-linux-gnu
          - rust: nightly
            target: powerpc-unknown-linux-gnu
          - rust: nightly
            target: powerpc64-unknown-linux-gnu
            os: ubuntu-18.04
          - rust: nightly
            target: powerpc64le-unknown-linux-gnu
          - rust: nightly
            target: riscv32gc-unknown-linux-gnu
          - rust: nightly
            target: riscv64gc-unknown-linux-gnu
          - rust: nightly
            target: s390x-unknown-linux-gnu
          - rust: nightly
            target: sparc64-unknown-linux-gnu
            os: ubuntu-18.04
          - rust: nightly
            target: thumbv7neon-unknown-linux-gnueabihf
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ matrix.rust }}
          components: rust-src
      - uses: taiki-e/install-action@cargo-hack
      - uses: taiki-e/install-action@cargo-minimal-versions
      - uses: dtolnay/install@cargo-expand
        if: startsWith(matrix.rust, 'nightly') && matrix.target == '' && matrix.os == ''
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: matrix.target != ''
      - run: |
          echo "RUSTFLAGS=${RUSTFLAGS} --cfg qemu" >>"${GITHUB_ENV}"
        if: matrix.target != '' && !startsWith(matrix.target, 'i686') && !startsWith(matrix.target, 'x86_64')
      - run: |
          echo "TARGET=--target=${{ matrix.target }}" >>"${GITHUB_ENV}"
        if: matrix.target != ''

      - run: cargo test -vv --workspace --exclude bench --all-features $TARGET $BUILD_STD $DOCTEST_XCOMPILE
      - run: cargo test -vv --workspace --exclude bench --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
      # LTO + doctests is very slow on some platforms
      - run: cargo test -vv --workspace --exclude bench --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE --tests
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat

      # +cmpxchg16b
      - run: cargo test -vv --workspace --exclude bench --all-features $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b
        if: matrix.target == '' || startsWith(matrix.target, 'x86_64')
      - run: cargo test -vv --workspace --exclude bench --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b
        if: matrix.target == '' || startsWith(matrix.target, 'x86_64')
      # LTO + doctests is very slow on some platforms
      - run: cargo test -vv --workspace --exclude bench --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE --tests
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b
        if: matrix.target == '' || startsWith(matrix.target, 'x86_64')

      # +lse
      - run: cargo test -vv --workspace --exclude bench --all-features $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+lse
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+lse
        if: startsWith(matrix.target, 'aarch64')
      - run: cargo test -vv --workspace --exclude bench --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+lse
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+lse
        if: startsWith(matrix.target, 'aarch64')
      # LTO + doctests is very slow on some platforms
      - run: cargo test -vv --workspace --exclude bench --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE --tests
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+lse
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+lse
        if: startsWith(matrix.target, 'aarch64')
      # TODO: it seems qemu-user has not yet properly implemented FEAT_LSE2: https://github.com/taiki-e/portable-atomic/pull/11#issuecomment-1114044327

      # pwr8
      - run: cargo test -vv --workspace --exclude bench --all-features $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-cpu=pwr8
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr8
        if: startsWith(matrix.target, 'powerpc64-')
      - run: cargo test -vv --workspace --exclude bench --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-cpu=pwr8
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr8
        if: startsWith(matrix.target, 'powerpc64-')
      # LTO + doctests is very slow on some platforms
      - run: cargo test -vv --workspace --exclude bench --all-features --release $TARGET $BUILD_STD $DOCTEST_XCOMPILE --tests
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-cpu=pwr8
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr8
        if: startsWith(matrix.target, 'powerpc64-')

      - run: cargo minimal-versions build -vvv --workspace --all-features --ignore-private $TARGET $BUILD_STD
        if: startsWith(matrix.rust, 'nightly')

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: '1.59'
          - rust: stable
          - rust: beta
          - rust: nightly
          # for avr: https://github.com/rust-lang/compiler-builtins/issues/400
          - rust: nightly-2020-12-26
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
        with:
          toolchain: ${{ matrix.rust }}
          components: rust-src
      - uses: taiki-e/install-action@cargo-hack
      - run: tools/build.sh

  no-std:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
      - run: sudo apt-get -o Acquire::Retries=10 -qq update && sudo apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y qemu-system-arm
      - run: tools/no-std.sh

  msrv:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: taiki-e/install-action@cargo-hack
      # Make sure this crate can be built with MSRV and all later versions.
      # However, this takes time, so for PR, set the version interval.
      - run: cargo hack build -vvv --workspace --feature-powerset --depth 3 --optional-deps --ignore-private --no-dev-deps --clean-per-version --version-range ..
        if: github.event_name != 'pull_request'
      - run: cargo hack build -vvv --workspace --feature-powerset --depth 3 --optional-deps --ignore-private --no-dev-deps --clean-per-version --version-range .. --version-step 2
        if: github.event_name == 'pull_request'

  miri:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@miri
      - run: cargo miri test --workspace --exclude bench --all-features
        env:
          MIRIFLAGS: -Zmiri-strict-provenance -Zmiri-symbolic-alignment-check -Zmiri-disable-isolation
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -Z randomize-layout

  san:
    strategy:
      fail-fast: false
      matrix:
        sanitizer:
          - address
          - memory
          - thread
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src
      - run: |
          echo "ASAN_OPTIONS=detect_stack_use_after_return=1" >>"${GITHUB_ENV}"
          echo "RUSTFLAGS=${RUSTFLAGS} -Z sanitizer=address" >>"${GITHUB_ENV}"
          echo "RUSTDOCFLAGS=${RUSTDOCFLAGS} -Z sanitizer=address" >>"${GITHUB_ENV}"
        if: matrix.sanitizer == 'address'
      - run: |
          echo "MSAN_OPTIONS=verbosity=2" >>"${GITHUB_ENV}"
          echo "RUSTFLAGS=${RUSTFLAGS} -Z sanitizer=memory -Z sanitizer-memory-track-origins" >>"${GITHUB_ENV}"
          echo "RUSTDOCFLAGS=${RUSTDOCFLAGS} -Z sanitizer=memory -Z sanitizer-memory-track-origins" >>"${GITHUB_ENV}"
        if: matrix.sanitizer == 'memory'
      - run: |
          echo "RUSTFLAGS=${RUSTFLAGS} -Z sanitizer=thread" >>"${GITHUB_ENV}"
          echo "RUSTDOCFLAGS=${RUSTDOCFLAGS} -Z sanitizer=thread" >>"${GITHUB_ENV}"
        if: matrix.sanitizer == 'thread'
      - run: |
          cargo -Z build-std test -vv --workspace --exclude bench --all-features --target "$(rustc -Vv | grep host | sed 's/host: //')"
      - run: |
          cargo -Z build-std test -vv --workspace --exclude bench --all-features --release --target "$(rustc -Vv | grep host | sed 's/host: //')"
        if: matrix.sanitizer != 'memory' # https://github.com/google/sanitizers/issues/558
      # LTO + doctests is very slow on some platforms
      - run: |
          cargo -Z build-std test -vv --workspace --exclude bench --all-features --release --target "$(rustc -Vv | grep host | sed 's/host: //')" --tests
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
        if: matrix.sanitizer != 'memory' # https://github.com/google/sanitizers/issues/558
      # +cmpxchg16b
      - run: |
          cargo -Z build-std test -vv --workspace --exclude bench --all-features --target "$(rustc -Vv | grep host | sed 's/host: //')"
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b
      - run: |
          cargo -Z build-std test -vv --workspace --exclude bench --all-features --release --target "$(rustc -Vv | grep host | sed 's/host: //')"
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b
        if: matrix.sanitizer != 'memory' # https://github.com/google/sanitizers/issues/558
      # LTO + doctests is very slow on some platforms
      - run: |
          cargo -Z build-std test -vv --workspace --exclude bench --all-features --release --target "$(rustc -Vv | grep host | sed 's/host: //')" --tests
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b
        if: matrix.sanitizer != 'memory' # https://github.com/google/sanitizers/issues/558

  valgrind:
    env:
      CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER: valgrind -v --error-exitcode=1 --error-limit=no --leak-check=full --show-leak-kinds=all --track-origins=yes
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rust-src
      - uses: taiki-e/install-action@valgrind
      # -Z doctest-xcompile is needed to apply CARGO_TARGET_*_RUNNER to doctest.
      - run: cargo test -vv --workspace --exclude bench --all-features -Z doctest-xcompile
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} --cfg valgrind
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg valgrind
      - run: cargo test -vv --workspace --exclude bench --all-features --release -Z doctest-xcompile
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} --cfg valgrind
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg valgrind
      # LTO + doctests is very slow on some platforms
      - run: cargo test -vv --workspace --exclude bench --all-features --release -Z doctest-xcompile --tests
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} --cfg valgrind
          RUSTFLAGS: ${{ env.RUSTFLAGS }} --cfg valgrind
      # +cmpxchg16b
      - run: cargo test -vv --workspace --exclude bench --all-features -Z doctest-xcompile
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b --cfg valgrind
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b --cfg valgrind
      - run: cargo test -vv --workspace --exclude bench --all-features --release -Z doctest-xcompile
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b --cfg valgrind
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b --cfg valgrind
      # LTO + doctests is very slow on some platforms
      - run: cargo test -vv --workspace --exclude bench --all-features --release -Z doctest-xcompile --tests
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b --cfg valgrind
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b --cfg valgrind

  codegen:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
      - run: tools/no_atomic.sh
      - run: git add -N . && git diff --exit-code
        if: github.repository_owner != 'taiki-e' || github.event_name != 'schedule' && !(github.event_name == 'push' && github.ref == 'refs/heads/main')
      - id: diff
        run: |
          git config user.name "Taiki Endo"
          git config user.email "te316e89@gmail.com"
          git add -N .
          if ! git diff --exit-code; then
              git add .
              git commit -m "Update no_atomic.rs"
              echo "::set-output name=success::false"
          fi
        if: github.repository_owner == 'taiki-e' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main')
      - uses: taiki-e/create-pull-request@v4
        with:
          title: Update no_atomic.rs
          body: |
            Auto-generated by [create-pull-request][1]
            [Please close and immediately reopen this pull request to run CI.][2]

            [1]: https://github.com/peter-evans/create-pull-request
            [2]: https://github.com/peter-evans/create-pull-request/blob/HEAD/docs/concepts-guidelines.md#workarounds-to-trigger-further-workflow-runs
          branch: update-no-atomic-rs
        if: github.repository_owner == 'taiki-e' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main') && steps.diff.outputs.success == 'false'

  tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy,rustfmt
      - uses: taiki-e/install-action@shellcheck
      - run: cargo fmt --all --check
        if: always()
      - run: cargo clippy --workspace --all-features --all-targets
        if: always()
      - run: shellcheck $(git ls-files '*.sh')
        if: always()

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
      - run: cargo doc --workspace --all-features
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} --cfg docsrs

  # ALL THE PREVIOUS JOBS NEEDS TO BE ADDED TO THE `needs` SECTION OF THIS JOB!

  ci-success:
    name: ci
    if: github.event_name == 'push' && success()
    needs:
      - test
      - build
      - msrv
      - miri
      - san
      - valgrind
      - codegen
      - tidy
      - docs
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        run: exit 0
