name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - v0.3
      - dev
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_TEST_THREADS: 1
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  EXCLUDE: --exclude bench --exclude portable-atomic-internal-codegen

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  check-external-types:
    uses: taiki-e/workflows/.github/workflows/check-external-types.yml@main
  deny:
    uses: taiki-e/workflows/.github/workflows/deny.yml@main
  docs:
    uses: taiki-e/workflows/.github/workflows/docs.yml@main
  msrv:
    uses: taiki-e/workflows/.github/workflows/msrv.yml@main
    with:
      event_name: ${{ github.event_name }}
      # Exclude serde feature because the MSRV when it is enabled depends on the MSRV of serde
      args: -vvv --feature-powerset --depth 2 --optional-deps --exclude-features serde
  tidy:
    uses: taiki-e/workflows/.github/workflows/tidy.yml@main

  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: '1.59'
          - rust: stable
          - rust: beta
          - rust: nightly
          - rust: nightly
            os: macos-latest
          - rust: nightly
            os: windows-latest
          - rust: stable
            target: aarch64-unknown-linux-gnu
          - rust: beta
            target: aarch64-unknown-linux-gnu
          - rust: nightly
            target: aarch64-unknown-linux-gnu
          - rust: nightly
            target: aarch64_be-unknown-linux-gnu
          - rust: nightly
            target: arm-unknown-linux-gnueabi
          - rust: nightly
            target: armv5te-unknown-linux-gnueabi
          - rust: nightly
            target: armv7-unknown-linux-gnueabi
          - rust: nightly
            target: armv7-unknown-linux-gnueabihf
          - rust: nightly
            target: i586-unknown-linux-gnu
          - rust: nightly
            target: i686-unknown-linux-gnu
          - rust: nightly
            target: i686-pc-windows-msvc
            os: windows-latest
          - rust: nightly
            target: mips-unknown-linux-gnu
          - rust: nightly
            target: mips64-unknown-linux-gnuabi64
          - rust: nightly
            target: mips64el-unknown-linux-gnuabi64
          - rust: nightly
            target: mipsel-unknown-linux-gnu
          - rust: nightly
            target: powerpc-unknown-linux-gnu
          - rust: nightly
            target: powerpc64-unknown-linux-gnu
          - rust: nightly
            target: powerpc64le-unknown-linux-gnu
          - rust: nightly
            target: riscv32gc-unknown-linux-gnu
          - rust: nightly
            target: riscv64gc-unknown-linux-gnu
          - rust: nightly
            target: s390x-unknown-linux-gnu
          - rust: nightly
            target: sparc64-unknown-linux-gnu
          - rust: nightly
            target: thumbv7neon-unknown-linux-gnueabihf
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - run: lscpu
        if: startsWith(matrix.os, 'ubuntu') || matrix.os == ''
      - run: sysctl hw.optional machdep.cpu
        if: startsWith(matrix.os, 'macos')
      - name: Install Rust
        run: rustup toolchain add ${{ matrix.rust }} --no-self-update --component rust-src && rustup default ${{ matrix.rust }}
      - run: rustup toolchain add nightly --no-self-update
      - uses: taiki-e/install-action@cargo-hack
      - uses: taiki-e/install-action@cargo-minimal-versions
      - uses: taiki-e/cache-cargo-install-action@v1
        with:
          tool: cargo-careful
        if: startsWith(matrix.rust, 'nightly')
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: matrix.target != '' && !(startsWith(matrix.os, 'windows') || contains(matrix.target, '-musl') || contains(matrix.target, '-android'))
      - run: rustup target add "${{ matrix.target }}"
        if: matrix.target != '' && startsWith(matrix.os, 'windows')
      - run: echo "RUSTFLAGS=${RUSTFLAGS} --cfg qemu" >>"${GITHUB_ENV}"
        if: matrix.target != '' && !startsWith(matrix.target, 'i686') && !startsWith(matrix.target, 'x86_64')
      - run: echo "TARGET=--target=${{ matrix.target }}" >>"${GITHUB_ENV}"
        if: matrix.target != ''
      - run: echo "REPORT_TIME=-- -Z unstable-options --report-time" >>"${GITHUB_ENV}"
        if: startsWith(matrix.rust, 'nightly')
        # Since nightly-2022-12-23, -Z build-std + -Z randomize-layout + release mode on windows causes segfault.
      - run: echo "RANDOMIZE_LAYOUT=-Z randomize-layout" >>"${GITHUB_ENV}"
        if: startsWith(matrix.rust, 'nightly') && !startsWith(matrix.os, 'windows')

      - run: tools/test.sh -vv $TARGET $DOCTEST_XCOMPILE $BUILD_STD $REPORT_TIME
      # +cmpxchg16b
      - run: tools/test.sh -vv $TARGET $DOCTEST_XCOMPILE $BUILD_STD $REPORT_TIME
        env:
          # cmpxchg16b + outline-atomics (vmovdqa load/store) path is tested in above run on macOS.
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b --cfg portable_atomic_no_outline_atomics
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b --cfg portable_atomic_no_outline_atomics
        if: (matrix.target == '' || startsWith(matrix.target, 'x86_64'))
      # pwr7
      # powerpc64- (big-endian) is skipped because it is pre-pwr8 by default
      - run: tools/test.sh -vv $TARGET $DOCTEST_XCOMPILE $BUILD_STD $REPORT_TIME
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-cpu=pwr7
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr7
        if: startsWith(matrix.target, 'powerpc64le-')
      # pwr8
      # powerpc64le- (little-endian) is skipped because it is pwr8 by default
      - run: tools/test.sh -vv $TARGET $DOCTEST_XCOMPILE $BUILD_STD $REPORT_TIME
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-cpu=pwr8
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-cpu=pwr8
        if: startsWith(matrix.target, 'powerpc64-')

      - run: cargo minimal-versions build -vvv --workspace --all-features --ignore-private $TARGET $BUILD_STD

  build:
    strategy:
      fail-fast: false
      matrix:
        rust:
          - '1.34'
          - '1.59'
          - stable
          - beta
          - nightly
          # The oldest nightly that can compile this crate is nightly-2019-01-27
          # which Atomic{I,U}{8,16,32,64} stabilized.
          # https://github.com/rust-lang/rust/pull/57425
          # Note: Old nightly compilers are essentially fragile, so support for
          # them is on a best-effort basis.
          - nightly-2019-01-27
          # for AVR: https://github.com/rust-lang/compiler-builtins/issues/400
          - nightly-2020-12-26
          # for AVR: LLVM 16 broke AVR: https://github.com/rust-lang/compiler-builtins/issues/523
          # nightly-2023-03-25 is the last version uses LLVM 15.
          - nightly-2023-03-25
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup toolchain add ${{ matrix.rust }} --no-self-update --component rust-src && rustup default ${{ matrix.rust }}
      - uses: taiki-e/install-action@cargo-hack
      - run: tools/build.sh

  no-std:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup toolchain add nightly --no-self-update && rustup default nightly
      - uses: taiki-e/install-action@cargo-hack
      - run: |
          set -euxo pipefail
          sudo apt-get -o Acquire::Retries=10 -qq update && sudo apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends \
            avr-libc \
            gcc-avr \
            qemu-system-arm \
            qemu-system-misc \
            simavr
          # APT's qemu package doesn't provide firmware for riscv32: https://packages.ubuntu.com/en/jammy/all/qemu-system-data/filelist
          OPENSBI_VERSION=1.2
          curl --proto '=https' --tlsv1.2 -fsSL --retry 10 --retry-connrefused "https://github.com/riscv-software-src/opensbi/releases/download/v${OPENSBI_VERSION}/opensbi-${OPENSBI_VERSION}-rv-bin.tar.xz" \
            | tar xJf -
          sudo mv "opensbi-${OPENSBI_VERSION}-rv-bin/share/opensbi/ilp32/generic/firmware/fw_dynamic.bin" /usr/share/qemu/opensbi-riscv32-generic-fw_dynamic.bin
          sudo mv "opensbi-${OPENSBI_VERSION}-rv-bin/share/opensbi/ilp32/generic/firmware/fw_dynamic.elf" /usr/share/qemu/opensbi-riscv32-generic-fw_dynamic.elf
          rm -rf "opensbi-${OPENSBI_VERSION}-rv-bin"
      - run: tools/no-std.sh

  miri:
    strategy:
      fail-fast: false
      matrix:
        target:
          - '' # x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - powerpc64le-unknown-linux-gnu
          - s390x-unknown-linux-gnu
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup toolchain add nightly --no-self-update --component miri && rustup default nightly
      - run: sudo apt-get -o Acquire::Retries=10 -qq update && sudo apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends moreutils
      - run: echo "TARGET=--target=${{ matrix.target }}" >>"${GITHUB_ENV}"
        if: matrix.target != ''
      - run: cargo miri test --workspace --all-features $EXCLUDE $TARGET 2>&1 | ts -i '%.s  '
        env:
          MIRIFLAGS: -Zmiri-strict-provenance -Zmiri-symbolic-alignment-check -Zmiri-retag-fields -Zmiri-disable-isolation
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -Z randomize-layout
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -Z randomize-layout
          QUICKCHECK_TESTS: 10

  san:
    strategy:
      fail-fast: false
      matrix:
        sanitizer:
          - address
          - memory
          - thread
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup toolchain add nightly --no-self-update --component rust-src && rustup default nightly
      - run: sudo apt-get -o Acquire::Retries=10 -qq update && sudo apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends moreutils
      - run: |
          echo "ASAN_OPTIONS=detect_stack_use_after_return=1" >>"${GITHUB_ENV}"
          echo "RUSTFLAGS=${RUSTFLAGS} -Z sanitizer=address" >>"${GITHUB_ENV}"
          echo "RUSTDOCFLAGS=${RUSTDOCFLAGS} -Z sanitizer=address" >>"${GITHUB_ENV}"
        if: matrix.sanitizer == 'address'
      - run: |
          echo "MSAN_OPTIONS=verbosity=2" >>"${GITHUB_ENV}"
          echo "RUSTFLAGS=${RUSTFLAGS} -Z sanitizer=memory -Z sanitizer-memory-track-origins" >>"${GITHUB_ENV}"
          echo "RUSTDOCFLAGS=${RUSTDOCFLAGS} -Z sanitizer=memory -Z sanitizer-memory-track-origins" >>"${GITHUB_ENV}"
        if: matrix.sanitizer == 'memory'
      - run: |
          echo "RUSTFLAGS=${RUSTFLAGS} -Z sanitizer=thread" >>"${GITHUB_ENV}"
          echo "RUSTDOCFLAGS=${RUSTDOCFLAGS} -Z sanitizer=thread" >>"${GITHUB_ENV}"
        if: matrix.sanitizer == 'thread'
      - run: tools/test.sh -Z build-std -vv 2>&1 | ts -i '%.s  '
      # +cmpxchg16b
      - run: tools/test.sh -Z build-std -vv 2>&1 | ts -i '%.s  '
        env:
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b --cfg portable_atomic_no_outline_atomics
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b --cfg portable_atomic_no_outline_atomics

  valgrind:
    env:
      VALGRIND: valgrind
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Install Rust
        run: rustup toolchain add nightly --no-self-update --component rust-src && rustup default nightly
      - run: sudo apt-get -o Acquire::Retries=10 -qq update && sudo apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends moreutils
      - uses: taiki-e/install-action@valgrind
      - run: tools/test.sh -vv 2>&1 | ts -i '%.s  '
      # +cmpxchg16b
      - run: tools/test.sh -vv 2>&1 | ts -i '%.s  '
        env:
          # vmovdqa load/store path has been tested above, disable outline-atomics and test cmpxchg16b load/store path.
          RUSTDOCFLAGS: ${{ env.RUSTDOCFLAGS }} -C target-feature=+cmpxchg16b --cfg portable_atomic_no_outline_atomics
          RUSTFLAGS: ${{ env.RUSTFLAGS }} -C target-feature=+cmpxchg16b --cfg portable_atomic_no_outline_atomics
