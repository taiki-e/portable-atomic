#!/usr/bin/env bash
# SPDX-License-Identifier: Apache-2.0 OR MIT
# shellcheck disable=SC2207
set -CeEuo pipefail
IFS=$'\n\t'
trap -- 's=$?; printf >&2 "%s\n" "${0##*/}:${LINENO}: \`${BASH_COMMAND}\` exit with ${s}"; exit ${s}' ERR
cd -- "$(dirname -- "$0")"/..

# Update the list of targets that do not support atomic/CAS operations.
#
# USAGE:
#    ./tools/no_atomic.sh

retry() {
    for i in {1..10}; do
        if "$@"; then
            return 0
        else
            sleep "${i}"
        fi
    done
    "$@"
}
bail() {
    printf >&2 'error: %s\n' "$*"
    exit 1
}

file=no_atomic.rs

# We don't refer to NO_ATOMIC_CAS and NO_ATOMIC_64 in nightly-2022-02-11+
# because feature(cfg_target_has_atomic) stabilized. So, we get the list
# as of nightly-2022-02-10.
retry rustup toolchain add nightly-2022-02-10 --profile minimal --no-self-update &>/dev/null

no_atomic_cas=()
no_atomic_64=()

# `"max-atomic-width" == 0` means that atomic is not supported at all.
# We always provide lock-free atomic load/store by default for avr, msp430, and riscv
# regardless of the contents of NO_ATOMIC.
no_atomic=$(rustc -Z unstable-options --print all-target-specs-json | jq -r '. | to_entries[] | select(((.value."max-atomic-width" == 0) or (.value."min-atomic-width" and .value."min-atomic-width" != 8)) and .value.arch != "msp430") | "    \"" + .key + "\","')

# old rustc doesn't support all-target-specs-json
for target in $(rustc +nightly-2022-02-10 --print target-list); do
    eval "$(rustc +nightly-2022-02-10 -Z unstable-options --print target-spec-json --target "${target}" | jq -r '@sh "ATOMIC_CAS=\(."atomic-cas") MAX_ATOMIC_WIDTH=\(."max-atomic-width")"')"
    if [[ "${ATOMIC_CAS}" == "false" ]]; then
        no_atomic_cas+=("${target}")
    fi
    case "${MAX_ATOMIC_WIDTH}" in
        # It is not clear exactly what `"max-atomic-width" == null` means, but they
        # actually seem to have the same max-atomic-width as the target-pointer-width.
        # The targets currently included in this group are "mipsel-sony-psp",
        # "thumbv4t-none-eabi", "thumbv6m-none-eabi", all of which are
        # `"target-pointer-width" == "32"`, so assuming them `"max-atomic-width" == 32`
        # for now.
        32 | null) no_atomic_64+=("${target}") ;;
        # `"max-atomic-width" == 0` means that atomic is not supported at all.
        0) no_atomic_64+=("${target}") ;;
        64 | 128) ;;
        # As of nightly-2022-02-10, there is no `"max-atomic-width" == 16` or `"max-atomic-width" == 8` targets.
        *) bail "${target}" ;;
    esac
done

# sort and dedup
IFS=$'\n'
no_atomic_cas=($(LC_ALL=C sort -u <<<"${no_atomic_cas[*]}" | sed -E 's/^/    "/g; s/$/",/g'))
no_atomic_64=($(LC_ALL=C sort -u <<<"${no_atomic_64[*]}" | sed -E 's/^/    "/g; s/$/",/g'))
IFS=$'\n\t'

cat >|"${file}" <<EOF
// SPDX-License-Identifier: Apache-2.0 OR MIT
// This file is @generated by ${0##*/}.
// It is not intended for manual editing.

// Note: This is the list as of nightly-2022-02-10. We don't refer to this in
// nightly-2022-02-11+ because feature(cfg_target_has_atomic) stabilized.
#[rustfmt::skip]
static NO_ATOMIC_CAS: &[&str] = &[
${no_atomic_cas[*]}
];

// Note: This is the list as of nightly-2022-02-10. We don't refer to this in
// nightly-2022-02-11+ because feature(cfg_target_has_atomic) stabilized.
#[rustfmt::skip]
static NO_ATOMIC_64: &[&str] = &[
${no_atomic_64[*]}
];

#[rustfmt::skip]
static NO_ATOMIC: &[&str] = &[
${no_atomic}
];
EOF
